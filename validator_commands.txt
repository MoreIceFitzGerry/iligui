Aufruf-Syntax:
java -jar ilivalidator.jar [Options] [file]

Optionen:
Option
    #Beschreibung
------------------------------------------------------------------------------------------------------------------------------
--config  filename
    #Konfiguriert die Datenprüfung mit Hilfe einer INI-Datei. filename kann auch die Form ilidata:DatesetId haben, dann wird die entsprechende Datei aus den Repositories benutzt. Der Eintrag im ilidata.xml soll mit folgenden Kategorien markiert werden.
--metaConfig  filename
    #Konfiguriert den Validator mit Hilfe einer INI-Datei. filename kann auch die Form ilidata:DatesetId haben, dann wird die entsprechende Datei aus den Repositories benutzt. Der Eintrag im ilidata.xml soll mit folgenden Kategorien markiert werden.

--forceTypeValidation
    #Ignoriert die Konfiguration der Typprüfung aus der INI-Datei, d.h. es kann nur die Multiplizität aufgeweicht werden.
--disableAreaValidation
    #Schaltet die AREA Topologieprüfung aus (XTF).
--disableConstraintValidation
    #Schaltet die Constraint prüfung aus.
--allObjectsAccessible
    #Mit der Option nimmt der Validator an, dass er Zugriff auf alle Objekte hat. D.h. es wird z.B. auch die Multiplizität von Beziehungen auf externe Objekte geprüft.
--multiplicityOff
    #Schaltet die Prüfung der Multiplizität generell aus.
--singlePass
    #Schaltet alle Prüfungen aus, die nicht unmittelbar beim Ersten Lesen der Objekte ausgeführt werden können.
--skipPolygonBuilding
    #Schaltet die Bildung der Polygone aus (nur ITF).
--allowItfAreaHoles
    #Lässt bei ITF AREA Attributen innere Ränder zu, die keinem Objekt zugeordnet sind.
--models modelnames
    #Setzt spezifische Modellnamen, welche sich innerhalb von ili-Dateien befinden. Mehrere Modellnamen können durch Semikolon ‚;‘ getrennt werden. Das Setzen des Pfades, der zu den Modellen führt, muss mittels '--modeldir path' angegeben werden.
--modeldir path
    #Dateipfade, die Modell-Dateien (ili-Dateien) enthalten. Mehrere Pfade können durch Semikolon ‚;‘ getrennt werden. Es sind auch URLs von Modell-Repositories möglich. Default ist

--check-repo-data repositoryUrl
    #Es werden alle Daten (ITF und XTF) im gegebenen Repository geprüft/validiert. (Alle aktuellen Daten (gemäss precursorVersion))
--createIliData --ilidata ilidata.xml --repos repository
    #Es werden alle Daten (ITF und XTF) im gegebenen Folder/Repository analysiert und dann ein neues ilidata.xml mit den entsprechenden Metadaten erstellt. Wenn repository ein remote Repository bezeichnet, muss mit --srcfiles die Liste der Dateien angegeben werden.
--srcfiles files.txt
    #Liste mit relativen Dateipfaden (relativ zum gegebenen Folder/Repository). Ein Pfad pro Zeile.
--updateIliData --ilidata updatedIlidata.xml --repos repository --dataset datasetId newVersionOfData.xml
    #Es wird die gegebene Datei newVersionOfData.xml (ITF oder XTF) analysiert, und dann das ilidata.xml aus dem gegebenen Repository repository mit einem neuen Eintrag für den Datensatz mit der ID datasetId aktualisiert. Die neue Version des ilidata.xml wird in die Datei updatedIlidata.xml geschrieben und muss durch den Benutzer ins Repository übertragen werden.
--logtime
    #Ergänzt die log-Meldungen in der Log-Datei mit Zeitstempeln.
--log filename
    #Schreibt die log-Meldungen in eine Text-Datei.
--xtflog filename
    #Schreibt die log-Meldungen in eine INTERLIS 2-Datei. Die Datei result.xtf entspricht dem Modell IliVErrors.
--plugins folder
	#Verzeichnis mit JAR-Dateien, die Zusatzfunktionen enthalten. Die Zusatzfunktionen müssen das Java-Interface ch.interlis.iox_j.validator.InterlisFunction implementieren, und der Name der Java-Klasse muss mit IoxPlugin enden.
--proxy host
    #Proxy Server für den Zugriff auf Modell Repositories
--proxyPort port
	#Proxy Port für den Zugriff auf Modell Repositories
--gui
    #Es erscheint eine Bildschirmmaske, mit deren Hilfe die zu validierende Datei ausgewählt und die Validierung gestartet werden kann. Die Pfad der Modell-Dateien und die Proxyeinstellungen werden aus der Datei $HOME/.ilivalidator gelesen.
--verbose
	#Schreibt detailiertere validierungs log-Meldungen.
--trace
    #Erzeugt zusätzliche Log-Meldungen (wichtig für Programm-Fehleranalysen)
--help
	#Zeigt einen kurzen Hilfetext an.
--version
	#Zeigt die Version des Programmes an.